mdp

// constants for the configuration of the model
const bool synth_schedule = false;   // ask prism to syntesize the best scheduler (the one that minimizes dropped frames - weighted)
const bool event = true;             // shall this run event based (alternative is periodic invocation)
const double threshold_event;  // used to determine if the resource manager should be invoked, ignored if event = false

// constants for property assessment
const int penalty_frames = 10;
const int penalty_intervention = 1;

// constants for the simulation
const int num_cameras = 2;            // number of cameras
const int round_millis = 30;          // round duration in milliseconds
const int bytes_millis = 4194;        // number of bytes that can be sent per millisecond (total bw is 4Mbytes per sec)
const int max_frames;                 // determines the length of the simualtion - X frames per camera
const int minimum_framesize = 64;     // a frame occupies a minimum of X bytes
const int maximum_framesize = 100000; // a frame occupies a maximum of X bytes
const int sche = 0;                   // used to model the turns: scheduler -> (maybe)rm -> cam1 -> cam2
const int rmng = 1;                   // used to model the turns: scheduler -> (maybe)rm -> cam1 -> cam2
const int cam1 = 2;                   // used to model the turns: scheduler -> (maybe)rm -> cam1 -> cam2
const int cam2 = 3;                   // used to model the turns: scheduler -> (maybe)rm -> cam1 -> cam2
const double lambda1;                 // used by the resource manager to discriminate between cameras [0..1]
const double lambda2;                 // used by the resource manager to discriminate between cameras [0..1]

// global variables
global rounds: int init 0;           // count the number of rounds in total
global turn: [sche..cam2] init sche; // detrmines the current executing entity 
global want_rm: bool init true;      // should the bandwidth be allocated

// used to assess in properties if things are changing, need to be global to be reset by the scheduler
global rmchange: bool init false;
global c1change: bool init false;
global c2change: bool init false;

// POTENTIAL IMPROVEMENT: this part should eventually be substituted with either-or
//       (1) stochastic disturbance based on some observation
//       (2) precise model based on encoding technique and parameters like amount of nature and light
// for now this is just a very simple model of the frame size, which has saturation levels but is linear wrt quality
// ******************** FRAME SIZE COMPUTATION (INI) ********************
formula framesize1 = min(maximum_framesize, max(minimum_framesize, ceil(q1 * maximum_framesize / 100)));
formula framesize2 = min(maximum_framesize, max(minimum_framesize, ceil(q2 * maximum_framesize / 100)));
// ******************** FRAME SIZE COMPUTATION (FIN) ********************

// ******************** TIMES COMPUTATION (INI) ********************
formula t1 = floor(round_millis * bw1 / 100); // time assigned in slot for camera 1 in milliseconds
formula t2 = ceil(round_millis * bw2 / 100);  // time assigned in slot for camera 2 in milliseconds
formula compute_tn1 = ceil(framesize1 / bytes_millis); // time in millis needed to transmit frame of camera 1
formula compute_tn2 = ceil(framesize2 / bytes_millis); // time in millis needed to transmit frame of camera 2
// ******************** TIMES COMPUTATION (FIN) ********************

// ******************** CONTROL AT THE CAMERA LEVEL (INI) ********************
// control parameters for the camera quality adaptation (integral controller)
const double k1 = 5.0;
const double k2 = 10.0;
const int minimum_quality = 15;
const int maximum_quality = 85;
// compute errors as: (time assigned in slot - time needed in slot) / (time assigned in slot)
formula f1 = (t1 - compute_tn1) / t1; // matching function camera 1
formula f2 = (t2 - compute_tn2) / t2; // matching function camera 2
// control actions
formula update_q1 = max(minimum_quality, min(maximum_quality, floor(q1 + k1 * f1)));
formula update_q2 = max(minimum_quality, min(maximum_quality, floor(q2 + k2 * f2)));
// ******************** CONTROL AT THE CAMERA LEVEL (FIN) ********************

// ******************** CONTROL AT THE NETWORK MANAGER LEVEL (INI) ********************
const double eps = 0.4;
const int minimum_bw = 1;
const int maximum_bw = 100;
formula sum_lambdaf = lambda1 * f1 + lambda2 * f2;
formula update_bw1 = max(minimum_bw, min(maximum_bw, floor(100 * (bw1/100 + eps * (-lambda1 * f1 + sum_lambdaf * bw1/100)))));
formula update_bw2 = 100 - update_bw1;  // camera 2 gets the remaining percentage, NOTE: improtant update_bw1 and not bw1 
// ******************** CONTROL AT THE NETWORK MANAGER LEVEL (FIN) ********************

module scheduler
  choice_done: bool init false;
  calling_rm: bool init false;

  // Decision for synthesis of best strategy
  [best_dont] (synth_schedule) & (turn = sche) & (rounds < max_frames) & (!choice_done) -> (calling_rm' = false) & (choice_done' = true);
  [best_do] (synth_schedule) & (turn = sche) & (rounds < max_frames) & (!choice_done) -> (calling_rm' = true) & (choice_done' = true);

  // Decision without synthesis
  [decision] (!synth_schedule) & (turn = sche) & (rounds < max_frames) & (!choice_done) -> (calling_rm' = want_rm) & (choice_done' = true);
 
  [] (turn = sche) & (rounds < max_frames) & (choice_done) & (calling_rm)  -> (turn' = rmng) & (calling_rm' = false);
  [] (turn = sche) & (rounds < max_frames) & (choice_done) & (!calling_rm) -> (turn' = cam1) &
                                                                              (rounds' = rounds + 1) &
                                                                              (choice_done' = false) &
                                                                              (want_rm' = event ? false : true) & // time based acts every round_millis
                                                                              (rmchange' = false) & (c1change' = false) & (c2change' = false); // reset
endmodule

module rm
  bw1: [minimum_bw..maximum_bw] init floor(maximum_bw / num_cameras);
  bw2: [minimum_bw..maximum_bw] init ceil(maximum_bw / num_cameras);
  rm_interventions: int init 0;

  [] (turn = rmng) -> (want_rm' = false) & // I have done my job
                      (turn' = sche) & // go back to the scheduler
                      (bw1' = update_bw1)  & // network manager update camera 1
                      (bw2' = update_bw2) & // network manager update camera 2
                      (rmchange' = (bw1 = update_bw1 ? false : true)) & // we only need to see if bw1 changes, bw2 depends on it
                      (rm_interventions' = rm_interventions+1);
endmodule

module c1
  q1: [minimum_quality..maximum_quality] init maximum_quality;
  s1: [minimum_framesize..maximum_framesize] init maximum_framesize;
  tran1: int init 0; // number of frames transmitted by camera 1
  drop1: int init 0; // number of frames dropped by camera 1
  [] (turn = cam1) -> (turn' = cam2) & (q1' = update_q1) & (s1' = framesize1)
                    & (c1change' = (q1 = update_q1 ? false : true)) 
                    & (tran1' = compute_tn1<=t1? tran1+1: tran1)
                    & (drop1' = compute_tn1>t1? drop1+1: drop1)
                    & (want_rm' = f1 > threshold_event | f1 < -threshold_event ? true : want_rm);
endmodule

module c2
  q2: [minimum_quality..maximum_quality] init maximum_quality;
  s2: [minimum_framesize..maximum_framesize] init maximum_framesize;
  tran2: int init 0; // number of frames transmitted by camera 2
  drop2: int init 0; // number of frames dropped by camera 2
  [] (turn = cam2) -> (turn' = sche) & (q2' = update_q2) & (s2' = framesize2)
                    & (c2change' = (q2 = update_q2 ? false : true))
                    & (tran2' = compute_tn2<=t2? tran2+1: tran2)
                    & (drop2' = compute_tn2>t2? drop2+1: drop2)
                    & (want_rm' = f2 > threshold_event | f2 < -threshold_event ? true : want_rm);
endmodule


// ******************** PROPERTIES RELATED CODE (INI) ********************
label "any_change_event" = (rmchange | c1change | c2change);
rewards "decision_calls"
  [decision]  true: 1;
  [best_do]   true: 1;
  [best_dont] true: 1;
endrewards
rewards "rm_calls"
  [decision]  rounds = max_frames-1: rm_interventions;
  [best_do]   rounds = max_frames-1: rm_interventions;
  [best_dont] rounds = max_frames-1: rm_interventions;
endrewards
rewards "dropped_frames"
  [decision]  rounds = max_frames-1: drop1 + drop2;
  [best_do]   rounds = max_frames-1: drop1 + drop2;
  [best_dont] rounds = max_frames-1: drop1 + drop2;
endrewards
rewards "total_cost"
  [decision]  rounds = max_frames-1: penalty_frames * (drop1 + drop2) + penalty_intervention * (rm_interventions);
  [best_do]   rounds = max_frames-1: penalty_frames * (drop1 + drop2) + penalty_intervention * (rm_interventions);
  [best_dont] rounds = max_frames-1: penalty_frames * (drop1 + drop2) + penalty_intervention * (rm_interventions);
endrewards
// ******************** PROPERTIES RELATED CODE (FIN) ********************
